version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tqrs-app
    restart: unless-stopped
    depends_on:
      - database
      - redis
      - websocket
    environment:
      - APP_ENV=production
      - DB_HOST=database
      - DB_DATABASE=tqrs
      - DB_USERNAME=tqrs_user
      - DB_PASSWORD=tqrs_password
      - REDIS_HOST=redis
    volumes:
      - ./backend/storage:/var/www/backend/storage
      - ./backend/bootstrap/cache:/var/www/backend/bootstrap/cache
      - ./backend/.env:/var/www/backend/.env
    ports:
      - "80:80"
      - "443:443"
    networks:
      - tqrs-network

  database:
    image: mysql:8.0
    container_name: tqrs-database
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: tqrs
      MYSQL_USER: tqrs_user
      MYSQL_PASSWORD: tqrs_password
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - tqrs-network

  redis:
    image: redis:7-alpine
    container_name: tqrs-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tqrs-network

  websocket:
    build:
      context: .
      dockerfile: Dockerfile.websocket
    container_name: tqrs-websocket
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      - REDIS_HOST=redis
    ports:
      - "8080:8080"
    networks:
      - tqrs-network

  queue-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tqrs-queue
    restart: unless-stopped
    depends_on:
      - database
      - redis
    environment:
      - APP_ENV=production
      - DB_HOST=database
      - DB_DATABASE=tqrs
      - DB_USERNAME=tqrs_user
      - DB_PASSWORD=tqrs_password
      - REDIS_HOST=redis
    volumes:
      - ./backend/storage:/var/www/backend/storage
      - ./backend/.env:/var/www/backend/.env
    command: php /var/www/backend/artisan queue:work --sleep=3 --tries=3 --max-time=3600
    networks:
      - tqrs-network

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tqrs-scheduler
    restart: unless-stopped
    depends_on:
      - database
      - redis
    environment:
      - APP_ENV=production
      - DB_HOST=database
      - DB_DATABASE=tqrs
      - DB_USERNAME=tqrs_user
      - DB_PASSWORD=tqrs_password
      - REDIS_HOST=redis
    volumes:
      - ./backend/storage:/var/www/backend/storage
      - ./backend/.env:/var/www/backend/.env
    command: php /var/www/backend/artisan schedule:work
    networks:
      - tqrs-network

  nginx:
    image: nginx:alpine
    container_name: tqrs-nginx
    restart: unless-stopped
    depends_on:
      - app
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
      - ./frontend:/var/www/frontend
      - ./admin:/var/www/admin
    ports:
      - "80:80"
      - "443:443"
    networks:
      - tqrs-network

  certbot:
    image: certbot/certbot
    container_name: tqrs-certbot
    restart: no
    volumes:
      - ./docker/ssl:/etc/letsencrypt
      - ./docker/certbot-www:/var/www/certbot
    depends_on:
      - nginx
    networks:
      - tqrs-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  tqrs-network:
    driver: bridge 